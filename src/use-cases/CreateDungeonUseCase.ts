// Use Case: Create Dungeon
import { IDungeonRepository } from '../repositories/interfaces';
import { ICreateDungeonUseCase } from './interfaces';
import { Dungeon } from '../entities/Dungeon';

export class CreateDungeonUseCase implements ICreateDungeonUseCase {
  constructor(
    private dungeonRepository: IDungeonRepository
  ) {}

  async execute(data: Omit<any, 'id' | 'createdAt' | 'updatedAt'>): Promise<any> {
    try {
      // Validate input
      if (!data.name || !data.description || !data.battles) {
        throw new Error('Missing required fields: name, description, battles');
      }

      if (!data.battles || data.battles.length === 0) {
        throw new Error('Dungeon must have at least one battle');
      }

      // Validate difficulty
      if (data.difficulty < 1 || data.difficulty > 10) {
        throw new Error('Difficulty must be between 1 and 10');
      }

      // Validate minLevel
      if (data.minLevel < 1) {
        throw new Error('Minimum level must be at least 1');
      }

      // Validate battles structure
      for (let i = 0; i < data.battles.length; i++) {
        const battle = data.battles[i];
        if (!battle.enemies || battle.enemies.length === 0) {
          throw new Error(`Battle ${i} must have at least one enemy`);
        }
        if (battle.order !== i) {
          throw new Error(`Battle ${i} must have order ${i}`);
        }
      }

      // Create dungeon
      const dungeon = new Dungeon(
        '', // ID will be generated by database
        data.name,
        data.description,
        data.difficulty,
        data.minLevel,
        data.battles,
        new Date(),
        new Date()
      );

      // Save to database
      const savedDungeon = await this.dungeonRepository.save(dungeon);

      return savedDungeon;

    } catch (error) {
      console.error('Error creating dungeon:', error);
      throw error;
    }
  }
}