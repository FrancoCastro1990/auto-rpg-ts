// Use Case: Register User
import { IUserRepository } from '../repositories/interfaces';
import { IUser } from '../entities/interfaces';
import { User, UserCredentials, UserRole } from '../entities/User';
import { ConflictError, ValidationError } from '../middleware/security';

export interface RegisterUserRequest {
  email: string;
  username: string;
  password: string;
  role?: UserRole;
}

export interface RegisterUserResponse {
  success: boolean;
  user?: User;
  message: string;
}

export class RegisterUserUseCase {
  constructor(
    private userRepository: IUserRepository
  ) {}

  async execute(request: RegisterUserRequest): Promise<RegisterUserResponse> {
    try {
      // Validate input
      if (!request.email || !request.username || !request.password) {
        throw new ValidationError('Email, username, and password are required');
      }

      if (request.password.length < 8) {
        throw new ValidationError('Password must be at least 8 characters long');
      }

      // Check if user already exists
      const existingUser = await this.userRepository.findByEmail(request.email);
      if (existingUser) {
        throw new ConflictError('User with this email already exists');
      }

      const existingUsername = await this.userRepository.findByUsername(request.username);
      if (existingUsername) {
        throw new ConflictError('Username already taken');
      }

      // Hash password
      const passwordHash = await User.hashPassword(request.password);

      // Create user data object that matches IUser interface
      const userData: IUser = {
        id: '', // ID will be generated by database
        email: request.email,
        username: request.username,
        passwordHash,
        role: request.role || UserRole.PLAYER,
        isActive: true,
        createdAt: new Date(),
        updatedAt: new Date(),
        lastLoginAt: undefined
      };

      // Save to database
      const savedUserData = await this.userRepository.save(userData);
      const savedUser = User.fromJSON(savedUserData);

      return {
        success: true,
        user: savedUser,
        message: 'User registered successfully'
      };

    } catch (error) {
      console.error('Error registering user:', error);
      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';

      return {
        success: false,
        message: `Failed to register user: ${errorMessage}`
      };
    }
  }
}